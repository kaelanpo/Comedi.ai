// This is a placeholder file for the chat bundle
// The real bundle will be generated by the build script

export default function ChatPage() {
  return {
    render: (container) => {
      container.innerHTML = `
        <div class="flex flex-col h-full max-w-4xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
          <div class="bg-gradient-to-r from-purple-600 to-blue-500 text-white px-6 py-4">
            <h2 class="text-xl font-bold">Comedi.AI Chat</h2>
            <p class="text-sm opacity-90">Powered by Grok 3</p>
          </div>
          
          <div class="flex-1 p-6 overflow-y-auto chat-container" id="messages-container">
            <div class="flex justify-start mb-4">
              <div class="chat-bubble chat-bubble-ai relative px-6 py-4">
                <div class="relative z-10">
                  Hi there! I'm your AI comedy coach. Ask me to help with jokes, roasts, or any comedy advice!
                </div>
                <div class="chat-dots">
                  <div class="chat-dot ai-dot"></div>
                  <div class="chat-dot ai-dot"></div>
                  <div class="chat-dot ai-dot"></div>
                  <div class="chat-dot ai-dot"></div>
                </div>
              </div>
            </div>
          </div>
          
          <form id="chat-form" class="border-t border-gray-200 p-4">
            <div class="flex items-center">
              <input
                type="text"
                id="message-input"
                placeholder="Type your message..."
                class="flex-1 p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                type="submit"
                id="send-button"
                class="bg-gradient-to-r from-indigo-500 to-blue-600 text-white p-3 rounded-r-lg hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-blue-700 disabled:opacity-50 transition-all duration-200"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                </svg>
              </button>
            </div>
          </form>
        </div>
      `;
      
      // Get DOM elements
      const form = document.getElementById('chat-form');
      const input = document.getElementById('message-input');
      const sendButton = document.getElementById('send-button');
      const messagesContainer = document.getElementById('messages-container');
      
      if (!form || !input || !sendButton || !messagesContainer) {
        console.error('Could not find required elements');
        return;
      }
      
      // Store message history for API calls
      let messageHistory = [];
      
      // Function to append messages to the container
      function appendMessage(content, isUser) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`;
        
        const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        // Chat bubble with dots
        messageDiv.innerHTML = `
          <div class="chat-bubble ${isUser ? 'chat-bubble-user' : 'chat-bubble-ai'} px-6 py-4">
            <div class="relative z-10" style="font-size: 18px; line-height: 1.6;">
              ${content}
            </div>
            <div class="text-xs mt-1 opacity-80">
              ${timestamp}
            </div>
            <div class="chat-dots">
              <div class="chat-dot ${isUser ? 'user-dot' : 'ai-dot'}"></div>
              <div class="chat-dot ${isUser ? 'user-dot' : 'ai-dot'}"></div>
              <div class="chat-dot ${isUser ? 'user-dot' : 'ai-dot'}"></div>
              <div class="chat-dot ${isUser ? 'user-dot' : 'ai-dot'}"></div>
            </div>
          </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Add message to history for API context
        if (isUser) {
          messageHistory.push({ role: "user", content: content });
        } else {
          messageHistory.push({ role: "assistant", content: content });
        }
      }
      
      // Function to call the OpenRouter API with Grok 3
      async function callOpenRouterAPI(message) {
        try {
          sendButton.disabled = true;
          input.disabled = true;
          
          // Add a typing indicator
          const typingDiv = document.createElement('div');
          typingDiv.className = 'flex justify-start mb-4 typing-indicator';
          typingDiv.innerHTML = `
            <div class="chat-bubble chat-bubble-ai px-6 py-3 flex items-center">
              <div class="typing-dots">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
              </div>
            </div>
          `;
          messagesContainer.appendChild(typingDiv);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
          
          const response = await fetch('/api/openrouter/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              message,
              messageHistory
            })
          });
          
          // Remove typing indicator
          messagesContainer.removeChild(typingDiv);
          
          if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
          }
          
          const data = await response.json();
          
          if (data.success && data.reply) {
            appendMessage(data.reply, false);
            
            // Update message history with the one from the server if available
            if (data.messageHistory) {
              messageHistory = data.messageHistory;
            }
          } else {
            throw new Error(data.error || 'Unknown error occurred');
          }
        } catch (error) {
          console.error('API call failed:', error);
          appendMessage(`Sorry, I couldn't process that request. Error: ${error.message}`, false);
        } finally {
          sendButton.disabled = false;
          input.disabled = false;
          input.focus();
        }
      }
      
      // Handle sending messages
      function handleSendMessage(e) {
        e.preventDefault();
        
        const message = input.value.trim();
        if (!message) return;
        
        // Add user message to chat
        appendMessage(message, true);
        
        // Clear input
        input.value = '';
        
        // Call the API with Grok 3
        callOpenRouterAPI(message);
      }
      
      // Event listeners
      form.addEventListener('submit', handleSendMessage);
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          handleSendMessage(e);
        }
      });
      
      // Focus input on load
      input.focus();
    }
  };
} 