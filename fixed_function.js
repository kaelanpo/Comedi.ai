function addMessageToChat(type, text) { const chatContainer = document.querySelector(".chat-container"); const placeholder = chatContainer.querySelector(".chat-placeholder"); if (placeholder) { placeholder.remove(); } const messageEl = document.createElement("div"); messageEl.className = `message ${type}-message`; let messageContent = ""; if (type === "user") { messageContent = `<div class="message-content"><div class="message-text">${text}</div></div>`; } else if (type === "ai") { const sections = text.split("

").map(section => { if (section.startsWith("[Initial Insult]")) { return `<div class="roast-section initial-insult">${section}</div>`; } else if (section.startsWith("[Main Roast]")) { return `<div class="roast-section main-roast">${section}</div>`; } else if (section.startsWith("[Final Blow]")) { return `<div class="roast-section final-blow">${section}</div>`; } else { return `<div class="roast-section">${section}</div>`; } }).join(""); messageContent = `<div class="message-content"><div class="message-text roast-container">${sections}</div></div>`; } else if (type === "error") { messageContent = `<div class="message-content"><div class="message-text error-message"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>${text}</div></div>`; } messageEl.innerHTML = messageContent; chatContainer.appendChild(messageEl); chatContainer.scrollTop = chatContainer.scrollHeight; if (type !== "error") { try { const conversations = getConversations(); let activeConversationId = localStorage.getItem("activeConversationId"); let activeConversation; if (activeConversationId) { activeConversation = conversations.find(c => c.id === activeConversationId); } if (!activeConversation) { activeConversation = { id: Date.now().toString(), title: text.substring(0, 30) + (text.length > 30 ? "..." : ""), summary: text.substring(0, 50) + (text.length > 50 ? "..." : ""), messages: [], createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() }; conversations.push(activeConversation); activeConversationId = activeConversation.id; localStorage.setItem("activeConversationId", activeConversationId); } activeConversation.messages.push({ role: type === "user" ? "user" : "assistant", content: text, timestamp: new Date().toISOString() }); activeConversation.updatedAt = new Date().toISOString(); localStorage.setItem("conversations", JSON.stringify(conversations)); renderConversations(conversations); } catch (error) { console.error("Error saving message:", error); showNotification("Failed to save message", "error"); } } }
